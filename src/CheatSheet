MultiThreading


start() vs run()
{
	start() - it creates a new thread and will ask the processor to look for run() and execute it on the new thread. Encourages multithreading.
		The new thread will create a new call stack and hence help multi threading.
	run() - it does not create a new thread instead it runs on the thread that called it. Does not encourage multithreading.
		The thread will enter the existing call stack instead of creating a new call stack and hence will be in a queue.
}

volatile keyword
{
	To access a variable of a thread using another thread, volatile keyword is used. The volatile variable will not be cached in a single thread.
}


synchronized keyword - every object in java has an intrensic lock/monitor lock/mutex. It provides acces to only one thread at a time by issuing lock.

join()
{
	Thread class provides the join() method which allows one thread to wait until another thread completes its execution. If join() is invoked, it will make sure the thread t is terminated before executing another thread
}

interrupt()
{
	This lets the thread know that it has been interrupted. Can also use Thread.currentThread().isInterrupted() to check if an interrupt has occured during the execution.
	This can be used during context switching.

}

ExecutorService
{
	ExecutorService can be used to create a thread pool by calling its static method (Executors.newFixedThreadPool(no of threads in the pool))
	It has a .submit(thread) method to submit the thread to the pool and .awaitTermination(measure, unit) to wait for a certain time for the pool to finish execution and a .shutdown() method to end.
}

CountDownLatch
{
	Thread waits for the given no of threads to start before it complete. .await(); is used to wait/return after the given no of threads complete. .countDown() is used to decrement the counter of the countDownLatch
	Usefull to complete execution of prioritize threads/thread pool before starting new thread.
}

java.util.concurrent.ArrayBlockingQueue, java.util.concurrent.BlockingQueue: High level concurrency

wait() notify() and notifyAll() - low level concurrency
{
	These can be called only in a synchronized block of code.
	wait() - Releases the lock/monitor from the current thread/synchronized block. It puts the thread to sleep.
	notify() - It wakes up the other thread from sleep and releases the lock/monitor. However, the thread/synchronized block must complete before moving to another thread.
	notifyAll() - Same as notify() but wakes up all the thread that are waiting for the lock/monitor.
}

Reentrant Lock and Condition's .await() and .signal()
{
	It is a lock that can be locked multiple times and needs to unlock the same number ot times to run a new thread.
	Condition can store the Lock's object using lock.newCondition().
	.await() waits to acquire the lock (releases the lock).
	.signal() wakes up the other thread but does not release the lock.
	.lock() is used to acquire the lock and .unlock() is used to release the lock.

}

Semaphore - .acquire() .release() .availablePermits()
{
	Semaphores controls access to resources by issuing locks to threads. The lock can be unlocked by any thread and not just the thread that has acquired the lock.
	It has a counter that decrements when .acquire() is called and increments when .release() is called.
	.availablePermits() can be used to get the number of permits a semaphore has available for the threads to acquire.
	.aquire() waits indefinitely if there are no permits available for the thread to acquire.
}

Callable and Future {
	Callable is used when a thread has to return some value. It can be used in place of Runnable when a value is to be returned from the thread.
	Future is used to capture that returned value for the thread.
	Wildcards can also be used <T>.
}